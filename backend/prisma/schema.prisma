// prisma/schema.prisma

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Modelo de Usuario
model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String?   // Será null si el usuario se autentica con OAuth
  fullName       String
  points         Int       @default(0)
  userType       String    // Puedes asignar un valor como "CITIZEN" o "ADMIN"
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  oauthId        String?   // Almacena el ID de OAuth2 si es necesario
  reports        Report[]  // Relación con los reportes del usuario
  notifications  Notification[]  
  rewards        Reward[]  @relation("UserRewards")
  badges         Badge[]   @relation("UserBadges")
}

// Modelo de Reporte
model Report {
  id          Int       @id @default(autoincrement())
  description String
  location    String    // Asegúrate de que el campo 'location' esté definido en Prisma
  category    String
  status      String    @default("PENDING")
  imageUrl    String?   // Asegúrate de que el campo 'imageUrl' esté definido y sea opcional
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reportImages ReportImage[] @relation("ReportImages")
}

// Modelo de Imágenes de Reporte
model ReportImage {
  id        Int      @id @default(autoincrement())
  url       String   // URL de la imagen
  reportId  Int      // ID del reporte asociado
  report    Report   @relation("ReportImages", fields: [reportId], references: [id]) // Relación opuesta con Report
  createdAt DateTime @default(now())
}

// Modelo de Recompensa
model Reward {
  id              Int       @id @default(autoincrement())
  description     String
  pointsRequired  Int
  createdAt       DateTime  @default(now())
  users           User[]    @relation("UserRewards")
}

// Modelo de Insignia
model Badge {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  criteria    String
  users       User[]    @relation("UserBadges")
}

// Modelo de Notificación
model Notification {
  id          Int       @id @default(autoincrement())
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
}

// Modelo de Estadísticas (para visualización de actividades)
model Stats {
  id          Int       @id @default(autoincrement())
  reportCount Int       @default(0)
  resolvedCount Int     @default(0)
  category    String    // Cambiar a String
  createdAt   DateTime  @default(now())
}
